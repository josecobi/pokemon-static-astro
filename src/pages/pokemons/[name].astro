---
import type { GetStaticPaths } from "astro";
import PokemonCard from "@components/pokemon/PokemonCard.astro";
import MainLayout from "@layout/MainLayout.astro";
import type { PokemonListResponse } from "@interfaces/pokemon-list.response";
import Title from "@components/shared/Title.astro";
import { Icon } from 'astro-icon/components';

export const getStaticPaths = (async () => {
    
    const resp = await fetch('https://pokeapi.co/api/v2/pokemon?limit=151');
    const { results } = (await resp.json()) as PokemonListResponse;
    console.log("ðŸš€ ~ getStaticPaths ~ results:", results);
    
    return results.map( pokemon => ({
        params: { name: pokemon.name},
        props: { nameProp: pokemon.name, url: pokemon.url},
    }))
    // return [
    //     { params: {name:'bulbasaur'}, props: {nameProp:'bulbasur', url:'https://pokeapi.co/api/v2/pokemon/1/'}},
    //     { params: {name:'charmander'}, props: {nameProp:'charmander', url:'https://pokeapi.co/api/v2/pokemon/4/'} },
      
    // ];
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url, nameProp } = Astro.props;

const id = url.split('/').at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imgSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`


---

<MainLayout 
    title=`Pokemon - #${id} ${name}`
    description={`About pokemon ${name}`}
    image={imgSrc}
>
    <section class="mt-10 mx-10 flex flex-col justify-center items-center">
        <div class="flex flex-row">
            <div>
                <button onclick="history.back()" class="text-blue-500">Back</button>
                <Title>{name}</Title>
            </div>

            <button id="btn-favorite" class="ml-4" data-name={name} data-id={id}>
                <Icon data-empty name="heart-empty" size={50}/>
                <Icon data-full class="hidden" name="heart-full" size={50}/>
            </button>
        </div>  
        <PokemonCard name={ name } url={url} isBig={true}/>

        <audio controls class="mt-5" >
            <source src={audioSrc} type="audio/ogg">
            Your browser does not support the audio element.
        </audio>

    </section>

</MainLayout>

<script>
    import type { FavoritePokemon } from "@interfaces/favorite-pokemon";

    // interface FavoritePokemon {
    //     name: string;
    //     id: number;
    // }


    // document.addEventListener('astro:before-preparation', () => {
    //     console.log('astro:before-preparation');
    // })

    // document.addEventListener('astro:after-preparation', () => {
    //     console.log('astro:after-preparation');
    // })


    // document.addEventListener('astro:before-swap', () => {
    //     console.log('astro:before-swap');
    // })

    // document.addEventListener('astro:after-swap', () => {
    //     console.log('astro:after-swap');
    // })

    // document.addEventListener('astro:page-load', () => {
    //     console.log('hola');
    // });

    const handlePageLoad = () => {

        let favoritePokemons: FavoritePokemon[] = JSON.parse(
            localStorage.getItem('favorites') ?? '[]'
        );
    
        const btnFavorite = document.querySelector('#btn-favorite') as HTMLButtonElement;
        
        if (!btnFavorite) return;
        const name = btnFavorite.dataset.name ?? '';
        const id = btnFavorite.dataset.id ?? '';

        const heartEmpty = btnFavorite.querySelector('[data-empty') as HTMLElement;
        const heartFull = btnFavorite.querySelector('[data-full') as HTMLElement;
        const isFavorite = favoritePokemons.some(fav => fav.name === name);
        //function to show either fullheart or emptyheart
        const checkFav = () => {
            
            if(isFavorite){
                heartEmpty.classList.add('hidden')
                heartFull.classList.remove ('hidden');
            } 
        }
        checkFav()
        const toggleFavorite = () => {
            const isFavorite = favoritePokemons.some(fav => fav.name === name);
            
            if(isFavorite){
                //Remove
                favoritePokemons = favoritePokemons.filter( (fav) => fav.name !== name);

            } else {
                //Add
                favoritePokemons.push({
                    id: +id,
                    name: name,
                })

            }

            localStorage.setItem('favorites', JSON.stringify(favoritePokemons));
        }


        btnFavorite.addEventListener('click', () => {
            heartEmpty.classList.toggle('hidden');
            heartFull.classList.toggle('hidden');

            toggleFavorite();
        });
        checkFav();
    };
    
    document.addEventListener('astro:page-load', handlePageLoad);

    
    
</script>

<style>
    a {
        @apply hover:underline text-blue-500;
    }

    #btn-favorite {
        @apply hover:animate-pulse;
    }
</style>